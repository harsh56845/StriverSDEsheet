// Leetcode Link :- https://leetcode.com/problems/palindrome-linked-list/description/
class Solution {
    public ListNode middle(ListNode head){
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    public ListNode rev(ListNode head){
        ListNode n1 = null;
        while(head!=null){
            ListNode next = head.next;
            head.next = n1;
            n1 = head;
            head = next;
        }
        return n1;
    }
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return true;
        }
        ListNode mid = middle(head);
        ListNode revNode = rev(mid.next);
        mid.next = null;
        while(head!=null && revNode!=null){
            if(head.val!=revNode.val){
                return false;
            }
            head = head.next;
            revNode = revNode.next;
        }
        return true;
    }
}

// Coding Ninjas Link :- https://www.codingninjas.com/studio/problems/palindrome-linked-list_8230717?challengeSlug=striver-sde-challenge
public class Solution {

 

    public static boolean isPalindrome(LinkedListNode<Integer> head) {

        LinkedListNode<Integer> slow = head;

        LinkedListNode<Integer> fast = head;

 

        // Find the middle of the linked list

        while (fast != null && fast.next != null) {

            slow = slow.next;

            fast = fast.next.next;

        }

 

        // Reverse the second half of the linked list

        LinkedListNode<Integer> prev = null;

        LinkedListNode<Integer> curr = slow;

        while (curr != null) {

            LinkedListNode<Integer> next = curr.next;

            curr.next = prev;

            prev = curr;

            curr = next;

        }

 

        // Compare the first half and second half of the linked list

        LinkedListNode<Integer> p1 = head;

        LinkedListNode<Integer> p2 = prev;

        while (p2 != null) {

            if (!p1.data.equals(p2.data)) {

                return false;

            }

            p1 = p1.next;

            p2 = p2.next;

        }

 

        return true;

    }

}
