// Leetcode Link :- https://leetcode.com/problems/median-of-two-sorted-arrays/
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int[] new_arr = new int[n];

        int i=0, j=0, k=0;

        while (i<=n1 && j<=n2) {
            if (i == n1) {
                while(j<n2) new_arr[k++] = nums2[j++];
                break;
            } else if (j == n2) {
                while (i<n1) new_arr[k++] = nums1[i++];
                break;
            }

            if (nums1[i] < nums2[j]) {
                new_arr[k++] = nums1[i++];
            } else {
                new_arr[k++] = nums2[j++];
            }
        }

        if (n%2==0) return (float)(new_arr[n/2-1] + new_arr[n/2])/2;
        else return new_arr[n/2];
    }
}

// COding Ninjas link :- https://www.codingninjas.com/studio/problems/median-of-two-sorted-arrays_8230788?challengeSlug=striver-sde-challenge
import java.util.ArrayList;
import java.util.Collections;


public class Solution {
    public static double median(int[] a, int[] b) {
        // Write your code here.
    ArrayList<Integer> arr = new ArrayList<>();
    double dig = 0 ;
    int l1 = a.length;
    int l2 = b.length;
    for( int i = 0 ; i < l1 ; i++ )
    {
        arr.add(a[i]);
    }
    for(int j = 0 ; j < l2 ; j++)
    {
        arr.add(b[j]);
    }
    Collections.sort(arr);
    int len = arr.size();
    if(len % 2 == 0)
    {
        dig = arr.get(len/2) + arr.get(len/2 -1);
        return dig/2;
    }else{
        return arr.get(len/2);
    }
    }
}
