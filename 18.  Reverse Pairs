// Leetcode:- https://leetcode.com/problems/reverse-pairs
class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums,0,nums.length-1);
    }

    public int mergeSort(int[] nums,int start,int end){
        if(start>=end) return 0;
        int mid = (start+end)/2;
        int cnt = mergeSort(nums,start,mid)+mergeSort(nums,mid+1,end);

        int j = mid+1;
        for(int i = start;  i <= mid; i++){
            while(j<=end && nums[i]/2.0>nums[j]) j++;
                cnt+=j-(mid+1);
        }
        Arrays.sort(nums,start, end+1);
        return cnt;
    }
}

// CodingNinjas lInk:- https://www.codingninjas.com/studio/problems/reverse-pairs_8230825?challengeSlug=striver-sde-challenge&leftPanelTab=1
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;
 
public class Solution 
{
    public static int reversePairs(ArrayList<Integer> arr) 
    {
        int[] nums = new int[arr.size()];
        for(int i=0;i<arr.size();i++) nums[i]=arr.get(i);
        return mergeSort(nums,0,nums.length-1);
    }
 
 
 
    public static int mergeSort(int[] nums,int start,int end){
        if(start>=end) return 0;
        int mid = (start+end)/2;
        int cnt = mergeSort(nums,start,mid)+mergeSort(nums,mid+1,end);
 
        int j = mid+1;
        for(int i = start;  i <= mid; i++){
            while(j<=end && nums[i]/2.0>nums[j]) j++;
                cnt+=j-(mid+1);
        }
        Arrays.sort(nums,start, end+1);
        return cnt;
    }
 
}
