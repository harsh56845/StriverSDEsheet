// Leetcode Link :- https://leetcode.com/problems/palindrome-partitioning/
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>>ans=new ArrayList<>();
        List<String>temp=new ArrayList<>();
        solve(0,s,ans,temp);
        return ans;
    }
    public void solve(int ind,String s,List<List<String>>ans,List<String>temp){
        if(ind==s.length()){
            ans.add(new ArrayList<>(temp));
            return;
        }
        for(int i=ind;i<s.length();i++){
            if(isPalindrome(s,ind,i)){
                temp.add(s.substring(ind,i+1));
                solve(i+1,s,ans,temp);
                temp.remove(temp.size()-1);
            }
        }
    }

    public boolean isPalindrome(String s,int start,int end){
        while(start<=end){
            if(s.charAt(start++)!=s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
}

// Coding Ninjas Sol :- https://www.codingninjas.com/studio/problems/palindrome-partitioning_8230726?challengeSlug=striver-sde-challenge&leftPanelTab=1
import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean isPal(String s,int start,int end){
        while(start<=end){
            if(s.charAt(start)!=s.charAt(end)) return false;
            start++;
            end--;
        }
        return true;
    }
    public static void helper(String s,int idx,List<List<String>> sol,List<String> path){
        if(idx==s.length()){
            sol.add(new ArrayList<>(path));
            return;
        }

        for(int i=idx;i<s.length();i++){
            if(isPal(s, idx, i)){
                path.add(s.substring(idx,i+1));
                helper(s, i+1, sol, path);
                path.remove(path.size()-1);
            }
        }
    }
    public static List<List<String>> partition(String s) {
        List<List<String>> sol = new ArrayList<>();
        List<String> path = new ArrayList<>();
        helper(s,0,sol,path);
        return sol;
    }
} 
