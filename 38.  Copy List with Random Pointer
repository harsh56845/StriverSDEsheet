// Leetcode link :- https://leetcode.com/problems/copy-list-with-random-pointer/
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
      public Node copyRandomList(Node head) {
        if (head == null) return null;
        Node cur = head;
        while (cur != null) {
            Node next = cur.next;
            cur.next = new Node(cur.val, next, null);
            cur = next;
        }
        cur = head;
        while (cur != null) {
            if (cur.random != null)
                cur.next.random = cur.random.next;
            cur = cur.next.next;
        }
        cur = head;
        Node copyHead = head.next;
        while (cur != null) {
            Node next = cur.next.next;
            Node copy = cur.next;
            cur.next = next;
            if (next != null)
                copy.next = next.next;
            cur = next;
        }
        return copyHead;
    }
}



// codingNinjas Link:- https://www.codingninjas.com/studio/problems/copy-list-with-random-pointer_8230734?challengeSlug=striver-sde-challenge
import java.io.*;
import java.util.* ;




public class Solution {
    public static LinkedListNode<Integer> cloneRandomList(LinkedListNode<Integer> head) {
        // Write your code here.
         boolean flag = false;
         LinkedListNode<Integer> root = null;
         LinkedListNode<Integer> prev = null;
        while(head!=null)
        {
            LinkedListNode<Integer> next =null;
             LinkedListNode<Integer> random =null;


           if(head.next!=null)
           {
                    next = new LinkedListNode(head.next.data);
           }
            if(head.random!=null)
            {
                    random = new LinkedListNode(head.random.data);
            }
        
            LinkedListNode<Integer> curr = new LinkedListNode(head.data);
            curr.next = next;
            curr.random = random;
            if(prev!=null)
            {
                prev.next = curr;
            }
            if(!flag)
            {
                root = curr;
                flag = true;
            }
            prev = curr;
            head = head.next;
        }


        return root;


    }
}
