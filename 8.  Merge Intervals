// Leetcode link :- https://leetcode.com/problems/merge-intervals/
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
        
        if(intervals.length==0 || intervals==null){
            return res.toArray(new int[0][]);
        }

        Arrays.sort(intervals ,(a,b)->a[0]-b[0]);

        int start = intervals[0][0];
        int end = intervals[0][1];

        for(int[] i: intervals){
            if(i[0]<=end){
                end = Math.max(end,i[1]);
            }else{
                res.add(new int[]{start ,end});
                start = i[0];
                end = i[1];
            }
        }
        res.add(new int[]{start,end});
        return res.toArray(new int[0][]);
    }
}


// coding ninjas link :- https://www.codingninjas.com/codestudio/problems/merge-intervals_8230700?challengeSlug=striver-sde-challenge

import java.util.* ;
import java.io.*; 
/*******************************************************

    Following is the Interval class structure

    class Interval {
        int start, int finish;

        Interval(int start, int finish) {
            this.start = start;
            this.finish = finish;
        }
    }
    
*******************************************************/

import java.util.List;
import java.util.ArrayList;

public class Solution {
    public static List<Interval> mergeIntervals(Interval[] intervals) {
        // write your code here.
        int n = intervals.length;
        ArrayList<Interval> ans = new ArrayList<Interval>();
        
        if(intervals.length == 0 || intervals == null) {
            return ans;
        }

        // sort the starting points by ascending order
        Arrays.sort(intervals, (a, b) -> a.start - b.start);
        int start = intervals[0].start;
        int end = intervals[0].finish;

        // for an interval, compare its end with the next intervals start
        for(Interval interval : intervals) {
            if(interval.start <= end) {
                end = Math.max(end, interval.finish);
            }
            else {
                ans.add(new Interval(start, end));
                start = interval.start;
                end = interval.finish;
            }
        }

        ans.add(new Interval(start, end));
        return ans;
    }
}
